function MarkerClusterer(e,t,r){this.extend(MarkerClusterer,google.maps.OverlayView),this.map_=e,this.markers_=[],this.clusters_=[],this.sizes=[53,56,66,78,90],this.styles_=[],this.ready_=!1;var s=r||{};this.gridSize_=s.gridSize||60,this.minClusterSize_=s.minimumClusterSize||2,this.maxZoom_=s.maxZoom||null,this.styles_=s.styles||[],this.imagePath_=s.imagePath||this.MARKER_CLUSTER_IMAGE_PATH_,this.imageExtension_=s.imageExtension||this.MARKER_CLUSTER_IMAGE_EXTENSION_,this.zoomOnClick_=!0,void 0!=s.zoomOnClick&&(this.zoomOnClick_=s.zoomOnClick),this.averageCenter_=!1,void 0!=s.averageCenter&&(this.averageCenter_=s.averageCenter),this.setupStyles_(),this.setMap(e),this.prevZoom_=this.map_.getZoom();var o=this;google.maps.event.addListener(this.map_,"zoom_changed",function(){var e=o.map_.getZoom(),t=o.map_.minZoom||0,r=Math.min(o.map_.maxZoom||100,o.map_.mapTypes[o.map_.getMapTypeId()].maxZoom);e=Math.min(Math.max(e,t),r),o.prevZoom_!=e&&(o.prevZoom_=e,o.resetViewport())}),google.maps.event.addListener(this.map_,"idle",function(){o.redraw()}),t&&(t.length||Object.keys(t).length)&&this.addMarkers(t,!1)}function Cluster(e){this.markerClusterer_=e,this.map_=e.getMap(),this.gridSize_=e.getGridSize(),this.minClusterSize_=e.getMinClusterSize(),this.averageCenter_=e.isAverageCenter(),this.center_=null,this.markers_=[],this.bounds_=null,this.clusterIcon_=new ClusterIcon(this,e.getStyles(),e.getGridSize())}function ClusterIcon(e,t,r){e.getMarkerClusterer().extend(ClusterIcon,google.maps.OverlayView),this.styles_=t,this.padding_=r||0,this.cluster_=e,this.center_=null,this.map_=e.getMap(),this.div_=null,this.sums_=null,this.visible_=!1,this.setMap(this.map_)}function assert(e,t){if(!e){var r="";throw assert.caller&&assert.caller.name&&(r=assert.caller.name+": "),r+=t,new Error(r)}}function searchMatch(e,t){if("string"==typeof e&&"string"==typeof t||(e=e.toString(),t=t.toString()),e=e.toLowerCase().trim(),t=t.toLowerCase().trim(),""===e||""===t)return!1;var r=e.indexOf(t)>=0,s=t.indexOf(e)>=0;return r||s}function show(e,t){t?e.style.display="block":e.style.display="none"}function getTargetProperty(e,t){return e.dataset[t]}function getFilterCriteria(e){assert(e,"No filter provided.");var t=e.dataset.criteria;if("string"!=typeof t)return[];var r=t.split(" ");return r}function targetMatchesFilters(e,t){var r=!0,s=!0,o=!1,i=void 0;try{for(var a,n=t[Symbol.iterator]();!(s=(a=n.next()).done);s=!0){var l=a.value,u=getFilterCriteria(l),h=l.value;if(h!==PLACEHOLDER_VALUE){var p=!1,c=!0,d=!1,f=void 0;try{for(var g,y=u[Symbol.iterator]();!(c=(g=y.next()).done);c=!0){var _=g.value,v=getTargetProperty(e,_)||"";if(searchMatch(h,v)){p=!0;break}}}catch(m){d=!0,f=m}finally{try{!c&&y["return"]&&y["return"]()}finally{if(d)throw f}}if(!p){r=!1;break}}}}catch(m){o=!0,i=m}finally{try{!s&&n["return"]&&n["return"]()}finally{if(o)throw i}}return r}function handleUI(e){function t(e){return e.nodeName&&"INPUT"===e.nodeName?e.parentElement:e}assert(e&&e.length>0,"No search filters provided.");var r=!0,s=!1,o=void 0;try{for(var i,a=function(){var e=i.value;e.addEventListener("blur",function(){var r=e.value&&e.value.trim().length>0,s=e.selectedIndex&&e.selectedIndex>0;if(!r&&!s){var o=t(e);o.classList.remove("search-bar-btn-active")}}),e.addEventListener("focus",function(){var r=t(e);r.classList.add("search-bar-btn-active")})},n=e[Symbol.iterator]();!(r=(i=n.next()).done);r=!0)a()}catch(l){s=!0,o=l}finally{try{!r&&n["return"]&&n["return"]()}finally{if(s)throw o}}}function showOnMap(e,t){t.createMarkersFromCoordinates(e),t.createCluster()}function fillSearchFromQueryParameters(e){var t=MakeArg(),r=t.all(),s=Object.keys(r),o=!0,i=!1,a=void 0;try{for(var n,l=s[Symbol.iterator]();!(o=(n=l.next()).done);o=!0){var u=n.value,h=e.getFilterByCriterion(u);if(h){var p=r[u];p="string"==typeof p?p:p.toString(),e.fillFilter(h,p)}}}catch(c){i=!0,a=c}finally{try{!o&&l["return"]&&l["return"]()}finally{if(i)throw a}}e.applyFilters()}function initPage(){var e={searchBarSelector:SEARCH_BAR_SELECTOR,searchFieldsSelector:SEARCH_INPUT_SELECTOR,targetsContainerSelector:TILES_LIST_CONTAINER_SELECTOR,infoElSelector:SEARCH_INFO_SELECTOR,filtersAppliedcallback:function(e){var t=[],s=!0,o=!1,i=void 0;try{for(var a,n=e[Symbol.iterator]();!(s=(a=n.next()).done);s=!0){var l=a.value;l.dataset.longitude&&l.dataset.latitude&&t.push({latitude:l.dataset.latitude,longitude:l.dataset.longitude})}}catch(u){o=!0,i=u}finally{try{!s&&n["return"]&&n["return"]()}finally{if(o)throw i}}showOnMap(t,r)}},t=new SearchController(e),r=new MapController(MAP_TARGET_SELECTOR);fillSearchFromQueryParameters(t,r)}var babelHelpers={};babelHelpers["typeof"]="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},babelHelpers.classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},babelHelpers.createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,r,s){return r&&e(t.prototype,r),s&&e(t,s),t}}();var globalObj={};!function(e){e.MakeArg=function(){var t=function r(){return r.get.apply(e,arguments)};return t.version="1.2.0",t.parse=function(e){if(!e)return{};if(-1===e.indexOf("=")&&-1===e.indexOf("&"))return{};e=t._cleanParamStr(e);var r={},s=e.split("&");for(var o in s)if(s.hasOwnProperty(o)){var i=s[o].split("="),a=decodeURIComponent(i[0]),n=t.__decode(i[1]);t._access(r,a,n)}return r},t.__decode=function(e){for(;e&&e.indexOf("+")>-1;)e=e.replace("+"," ");return e=decodeURIComponent(e)},t._access=function(e,r,s){var o="undefined"!=typeof s,i=-1,a={"true":!0,"false":!1,"null":null};if("string"!=typeof r&&"[object String]"!=toString.call(r)||(i=r.search(/[\.\[]/)),-1===i)return t.coerceMode&&(s=s&&!isNaN(s)?+s:"undefined"===s?void 0:void 0!==a[s]?a[s]:s),o?e[r]=s:e[r];var n=r.substr(0,i),l=r.substr(i+1);switch(r.charAt(i)){case"[":return e[n]=e[n]||[],l=l.replace("]",""),-1===l.search(/[\.\[]/)&&(l=parseInt(l,10)),t._access(e[n],l,s);case".":return e[n]=e[n]||{},t._access(e[n],l,s)}return e},t.stringify=function(e,r){switch("undefined"==typeof e?"undefined":babelHelpers["typeof"](e)){case"object":var s,o=[];for(var i in e)if(e.hasOwnProperty(i)){var a=e[i];"undefined"!=typeof i&&0!==i.length&&"undefined"!=typeof a&&0!==a.length&&(s=r?r+"."+i:i,"undefined"!=typeof e.length&&(s=r?r+"["+i+"]":i),"object"===("undefined"==typeof a?"undefined":babelHelpers["typeof"](a))?o.push(t.stringify(a,s)):o.push(encodeURIComponent(s)+"="+encodeURIComponent(a)))}return o.join("&")}return encodeURIComponent(e)},t.url=function(){var e=t.urlUseHash?t.hashQuerySeperator:t.querySeperator,r=[location.pathname,e],s={};switch(arguments.length){case 1:r.push(t.stringify(arguments[0]));break;case 2:r[0]=t._cleanPath(arguments[0]),s=t.parse(arguments[0]),s=t.merge(s,arguments[1]),r.push(t.stringify(s));break;case 3:r[0]=t._cleanPath(arguments[0]),r[1]=t.querySeperator,r.push(t.stringify(arguments[1])),"string"==typeof arguments[2]?r.push(t.hashSeperator):r.push(t.hashQuerySeperator),r.push(t.stringify(arguments[2]))}var o=r.join("");return o.indexOf(e)==o.length-e.length&&(o=o.substr(0,o.length-e.length)),o},t.urlUseHash=!1,t.querySeperator="?",t.hashSeperator="#",t.hashQuerySeperator="#?",t.coerceMode=!0,t.all=function(){var e=t.parse(t.querystring()+"&"+t.hashstring());return t._all?t._all:t._all=e},t.get=function(e,r){var s=t._access(t.all(),e);return"undefined"==typeof s?r:s},t.query=function(){return t._query?t._query:t._query=t.parse(t.querystring())},t.hash=function(){return t._hash?t._hash:t._hash=t.parse(t.hashstring())},t.querystring=function(){return t._cleanParamStr(location.search)},t.hashstring=function(){return t._cleanParamStr(location.hash)},t._cleanParamStr=function(e){if(e.indexOf(t.querySeperator)>-1&&(e=e.split(t.querySeperator)[1]),e.indexOf(t.hashSeperator)>-1&&(e=e.split(t.hashSeperator)[1]),-1===e.indexOf("=")&&-1===e.indexOf("&"))return"";for(;0==e.indexOf(t.hashSeperator)||0==e.indexOf(t.querySeperator);)e=e.substr(1);return e},t._cleanPath=function(e){return e.indexOf(t.querySeperator)>-1&&(e=e.substr(0,e.indexOf(t.querySeperator))),e.indexOf(t.hashSeperator)>-1&&(e=e.substr(0,e.indexOf(t.hashSeperator))),e},t.merge=function(){var e={};for(var t in arguments)if(arguments.hasOwnProperty(t))for(var r in arguments[t])arguments[t].hasOwnProperty(r)&&(e[r]=arguments[t][r]);return e},t},e.Arg=e.MakeArg()}(globalObj);var MakeArg=globalObj.MakeArg;MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/images/m",MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_="png",MarkerClusterer.prototype.extend=function(e,t){return function(e){for(var t in e.prototype)this.prototype[t]=e.prototype[t];return this}.apply(e,[t])},MarkerClusterer.prototype.onAdd=function(){this.setReady_(!0)},MarkerClusterer.prototype.draw=function(){},MarkerClusterer.prototype.setupStyles_=function(){if(!this.styles_.length)for(var e,t=0;e=this.sizes[t];t++)this.styles_.push({url:this.imagePath_+(t+1)+"."+this.imageExtension_,height:e,width:e})},MarkerClusterer.prototype.fitMapToMarkers=function(){for(var e,t=this.getMarkers(),r=new google.maps.LatLngBounds,s=0;e=t[s];s++)r.extend(e.getPosition());this.map_.fitBounds(r)},MarkerClusterer.prototype.setStyles=function(e){this.styles_=e},MarkerClusterer.prototype.getStyles=function(){return this.styles_},MarkerClusterer.prototype.isZoomOnClick=function(){return this.zoomOnClick_},MarkerClusterer.prototype.isAverageCenter=function(){return this.averageCenter_},MarkerClusterer.prototype.getMarkers=function(){return this.markers_},MarkerClusterer.prototype.getTotalMarkers=function(){return this.markers_.length},MarkerClusterer.prototype.setMaxZoom=function(e){this.maxZoom_=e},MarkerClusterer.prototype.getMaxZoom=function(){return this.maxZoom_},MarkerClusterer.prototype.calculator_=function(e,t){for(var r=0,s=e.length,o=s;0!==o;)o=parseInt(o/10,10),r++;return r=Math.min(r,t),{text:s,index:r}},MarkerClusterer.prototype.setCalculator=function(e){this.calculator_=e},MarkerClusterer.prototype.getCalculator=function(){return this.calculator_},MarkerClusterer.prototype.addMarkers=function(e,t){if(e.length)for(var r,s=0;r=e[s];s++)this.pushMarkerTo_(r);else if(Object.keys(e).length)for(var r in e)this.pushMarkerTo_(e[r]);t||this.redraw()},MarkerClusterer.prototype.pushMarkerTo_=function(e){if(e.isAdded=!1,e.draggable){var t=this;google.maps.event.addListener(e,"dragend",function(){e.isAdded=!1,t.repaint()})}this.markers_.push(e)},MarkerClusterer.prototype.addMarker=function(e,t){this.pushMarkerTo_(e),t||this.redraw()},MarkerClusterer.prototype.removeMarker_=function(e){var t=-1;if(this.markers_.indexOf)t=this.markers_.indexOf(e);else for(var r,s=0;r=this.markers_[s];s++)if(r==e){t=s;break}return-1==t?!1:(e.setMap(null),this.markers_.splice(t,1),!0)},MarkerClusterer.prototype.removeMarker=function(e,t){var r=this.removeMarker_(e);return!t&&r?(this.resetViewport(),this.redraw(),!0):!1},MarkerClusterer.prototype.removeMarkers=function(e,t){for(var r,s=!1,o=0;r=e[o];o++){var i=this.removeMarker_(r);s=s||i}return!t&&s?(this.resetViewport(),this.redraw(),!0):void 0},MarkerClusterer.prototype.setReady_=function(e){this.ready_||(this.ready_=e,this.createClusters_())},MarkerClusterer.prototype.getTotalClusters=function(){return this.clusters_.length},MarkerClusterer.prototype.getMap=function(){return this.map_},MarkerClusterer.prototype.setMap=function(e){this.map_=e},MarkerClusterer.prototype.getGridSize=function(){return this.gridSize_},MarkerClusterer.prototype.setGridSize=function(e){this.gridSize_=e},MarkerClusterer.prototype.getMinClusterSize=function(){return this.minClusterSize_},MarkerClusterer.prototype.setMinClusterSize=function(e){this.minClusterSize_=e},MarkerClusterer.prototype.getExtendedBounds=function(e){var t=this.getProjection(),r=new google.maps.LatLng(e.getNorthEast().lat(),e.getNorthEast().lng()),s=new google.maps.LatLng(e.getSouthWest().lat(),e.getSouthWest().lng()),o=t.fromLatLngToDivPixel(r);o.x+=this.gridSize_,o.y-=this.gridSize_;var i=t.fromLatLngToDivPixel(s);i.x-=this.gridSize_,i.y+=this.gridSize_;var a=t.fromDivPixelToLatLng(o),n=t.fromDivPixelToLatLng(i);return e.extend(a),e.extend(n),e},MarkerClusterer.prototype.isMarkerInBounds_=function(e,t){return t.contains(e.getPosition())},MarkerClusterer.prototype.clearMarkers=function(){this.resetViewport(!0),this.markers_=[]},MarkerClusterer.prototype.resetViewport=function(e){for(var t,r=0;t=this.clusters_[r];r++)t.remove();for(var s,r=0;s=this.markers_[r];r++)s.isAdded=!1,e&&s.setMap(null);this.clusters_=[]},MarkerClusterer.prototype.repaint=function(){var e=this.clusters_.slice();this.clusters_.length=0,this.resetViewport(),this.redraw(),window.setTimeout(function(){for(var t,r=0;t=e[r];r++)t.remove()},0)},MarkerClusterer.prototype.redraw=function(){this.createClusters_()},MarkerClusterer.prototype.distanceBetweenPoints_=function(e,t){if(!e||!t)return 0;var r=6371,s=(t.lat()-e.lat())*Math.PI/180,o=(t.lng()-e.lng())*Math.PI/180,i=Math.sin(s/2)*Math.sin(s/2)+Math.cos(e.lat()*Math.PI/180)*Math.cos(t.lat()*Math.PI/180)*Math.sin(o/2)*Math.sin(o/2),a=2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)),n=r*a;return n},MarkerClusterer.prototype.addToClosestCluster_=function(e){for(var t,r=4e4,s=null,o=(e.getPosition(),0);t=this.clusters_[o];o++){var i=t.getCenter();if(i){var a=this.distanceBetweenPoints_(i,e.getPosition());r>a&&(r=a,s=t)}}if(s&&s.isMarkerInClusterBounds(e))s.addMarker(e);else{var t=new Cluster(this);t.addMarker(e),this.clusters_.push(t)}},MarkerClusterer.prototype.createClusters_=function(){if(this.ready_)for(var e,t=new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),this.map_.getBounds().getNorthEast()),r=this.getExtendedBounds(t),s=0;e=this.markers_[s];s++)!e.isAdded&&this.isMarkerInBounds_(e,r)&&this.addToClosestCluster_(e)},Cluster.prototype.isMarkerAlreadyAdded=function(e){if(this.markers_.indexOf)return-1!=this.markers_.indexOf(e);for(var t,r=0;t=this.markers_[r];r++)if(t==e)return!0;return!1},Cluster.prototype.addMarker=function(e){if(this.isMarkerAlreadyAdded(e))return!1;if(this.center_){if(this.averageCenter_){var t=this.markers_.length+1,r=(this.center_.lat()*(t-1)+e.getPosition().lat())/t,s=(this.center_.lng()*(t-1)+e.getPosition().lng())/t;this.center_=new google.maps.LatLng(r,s),this.calculateBounds_()}}else this.center_=e.getPosition(),this.calculateBounds_();e.isAdded=!0,this.markers_.push(e);var o=this.markers_.length;if(o<this.minClusterSize_&&e.getMap()!=this.map_&&e.setMap(this.map_),o==this.minClusterSize_)for(var i=0;o>i;i++)this.markers_[i].setMap(null);return o>=this.minClusterSize_&&e.setMap(null),this.updateIcon(),!0},Cluster.prototype.getMarkerClusterer=function(){return this.markerClusterer_},Cluster.prototype.getBounds=function(){for(var e,t=new google.maps.LatLngBounds(this.center_,this.center_),r=this.getMarkers(),s=0;e=r[s];s++)t.extend(e.getPosition());return t},Cluster.prototype.remove=function(){this.clusterIcon_.remove(),this.markers_.length=0,delete this.markers_},Cluster.prototype.getSize=function(){return this.markers_.length},Cluster.prototype.getMarkers=function(){return this.markers_},Cluster.prototype.getCenter=function(){return this.center_},Cluster.prototype.calculateBounds_=function(){var e=new google.maps.LatLngBounds(this.center_,this.center_);this.bounds_=this.markerClusterer_.getExtendedBounds(e)},Cluster.prototype.isMarkerInClusterBounds=function(e){return this.bounds_.contains(e.getPosition())},Cluster.prototype.getMap=function(){return this.map_},Cluster.prototype.updateIcon=function(){var e=this.map_.getZoom(),t=this.markerClusterer_.getMaxZoom();if(t&&e>t)for(var r,s=0;r=this.markers_[s];s++)r.setMap(this.map_);else{if(this.markers_.length<this.minClusterSize_)return void this.clusterIcon_.hide();var o=this.markerClusterer_.getStyles().length,i=this.markerClusterer_.getCalculator()(this.markers_,o);this.clusterIcon_.setCenter(this.center_),this.clusterIcon_.setSums(i),this.clusterIcon_.show()}},ClusterIcon.prototype.triggerClusterClick=function(){var e=this.cluster_.getMarkerClusterer();google.maps.event.trigger(e,"clusterclick",this.cluster_),e.isZoomOnClick()&&this.map_.fitBounds(this.cluster_.getBounds())},ClusterIcon.prototype.onAdd=function(){if(this.div_=document.createElement("DIV"),this.visible_){var e=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(e),this.div_.innerHTML=this.sums_.text}var t=this.getPanes();t.overlayMouseTarget.appendChild(this.div_);var r=this;google.maps.event.addDomListener(this.div_,"click",function(){r.triggerClusterClick()})},ClusterIcon.prototype.getPosFromLatLng_=function(e){var t=this.getProjection().fromLatLngToDivPixel(e);return t.x-=parseInt(this.width_/2,10),t.y-=parseInt(this.height_/2,10),t},ClusterIcon.prototype.draw=function(){if(this.visible_){var e=this.getPosFromLatLng_(this.center_);this.div_.style.top=e.y+"px",this.div_.style.left=e.x+"px"}},ClusterIcon.prototype.hide=function(){this.div_&&(this.div_.style.display="none"),this.visible_=!1},ClusterIcon.prototype.show=function(){if(this.div_){var e=this.getPosFromLatLng_(this.center_);this.div_.style.cssText=this.createCss(e),this.div_.style.display=""}this.visible_=!0},ClusterIcon.prototype.remove=function(){this.setMap(null)},ClusterIcon.prototype.onRemove=function(){this.div_&&this.div_.parentNode&&(this.hide(),this.div_.parentNode.removeChild(this.div_),this.div_=null)},ClusterIcon.prototype.setSums=function(e){this.sums_=e,this.text_=e.text,this.index_=e.index,this.div_&&(this.div_.innerHTML=e.text),this.useStyle()},ClusterIcon.prototype.useStyle=function(){var e=Math.max(0,this.sums_.index-1);e=Math.min(this.styles_.length-1,e);var t=this.styles_[e];this.url_=t.url,this.height_=t.height,this.width_=t.width,this.textColor_=t.textColor,this.anchor_=t.anchor,this.textSize_=t.textSize,this.backgroundPosition_=t.backgroundPosition},ClusterIcon.prototype.setCenter=function(e){this.center_=e},ClusterIcon.prototype.createCss=function(e){var t=[];t.push("background-image:url("+this.url_+");");var r=this.backgroundPosition_?this.backgroundPosition_:"0 0";t.push("background-position:"+r+";"),"object"===babelHelpers["typeof"](this.anchor_)?("number"==typeof this.anchor_[0]&&this.anchor_[0]>0&&this.anchor_[0]<this.height_?t.push("height:"+(this.height_-this.anchor_[0])+"px; padding-top:"+this.anchor_[0]+"px;"):t.push("height:"+this.height_+"px; line-height:"+this.height_+"px;"),"number"==typeof this.anchor_[1]&&this.anchor_[1]>0&&this.anchor_[1]<this.width_?t.push("width:"+(this.width_-this.anchor_[1])+"px; padding-left:"+this.anchor_[1]+"px;"):t.push("width:"+this.width_+"px; text-align:center;")):t.push("height:"+this.height_+"px; line-height:"+this.height_+"px; width:"+this.width_+"px; text-align:center;");var s=this.textColor_?this.textColor_:"black",o=this.textSize_?this.textSize_:11;return t.push("cursor:pointer; top:"+e.y+"px; left:"+e.x+"px; color:"+s+"; position:absolute; font-size:"+o+"px; font-family:Arial,sans-serif; font-weight:bold"),t.join("")},window.MarkerClusterer=MarkerClusterer,MarkerClusterer.prototype.addMarker=MarkerClusterer.prototype.addMarker,MarkerClusterer.prototype.addMarkers=MarkerClusterer.prototype.addMarkers,MarkerClusterer.prototype.clearMarkers=MarkerClusterer.prototype.clearMarkers,MarkerClusterer.prototype.fitMapToMarkers=MarkerClusterer.prototype.fitMapToMarkers,MarkerClusterer.prototype.getCalculator=MarkerClusterer.prototype.getCalculator,MarkerClusterer.prototype.getGridSize=MarkerClusterer.prototype.getGridSize,MarkerClusterer.prototype.getExtendedBounds=MarkerClusterer.prototype.getExtendedBounds,MarkerClusterer.prototype.getMap=MarkerClusterer.prototype.getMap,MarkerClusterer.prototype.getMarkers=MarkerClusterer.prototype.getMarkers,MarkerClusterer.prototype.getMaxZoom=MarkerClusterer.prototype.getMaxZoom,MarkerClusterer.prototype.getStyles=MarkerClusterer.prototype.getStyles,MarkerClusterer.prototype.getTotalClusters=MarkerClusterer.prototype.getTotalClusters,MarkerClusterer.prototype.getTotalMarkers=MarkerClusterer.prototype.getTotalMarkers,MarkerClusterer.prototype.redraw=MarkerClusterer.prototype.redraw,MarkerClusterer.prototype.removeMarker=MarkerClusterer.prototype.removeMarker,MarkerClusterer.prototype.removeMarkers=MarkerClusterer.prototype.removeMarkers,MarkerClusterer.prototype.resetViewport=MarkerClusterer.prototype.resetViewport,MarkerClusterer.prototype.repaint=MarkerClusterer.prototype.repaint,MarkerClusterer.prototype.setCalculator=MarkerClusterer.prototype.setCalculator,MarkerClusterer.prototype.setGridSize=MarkerClusterer.prototype.setGridSize,MarkerClusterer.prototype.setMaxZoom=MarkerClusterer.prototype.setMaxZoom,MarkerClusterer.prototype.onAdd=MarkerClusterer.prototype.onAdd,MarkerClusterer.prototype.draw=MarkerClusterer.prototype.draw,Cluster.prototype.getCenter=Cluster.prototype.getCenter,Cluster.prototype.getSize=Cluster.prototype.getSize,Cluster.prototype.getMarkers=Cluster.prototype.getMarkers,ClusterIcon.prototype.onAdd=ClusterIcon.prototype.onAdd,ClusterIcon.prototype.draw=ClusterIcon.prototype.draw,ClusterIcon.prototype.onRemove=ClusterIcon.prototype.onRemove,Object.keys=Object.keys||function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t};var MapController=function(){function e(t){babelHelpers.classCallCheck(this,e),this.markers=[],this.map=this.initMap(t)}return babelHelpers.createClass(e,[{key:"initMap",value:function(e){var t={mapTypeId:google.maps.MapTypeId.ROADMAP,zoom:14,scrollwheel:!1,maxZoom:17},r=new google.maps.Map(document.querySelector(e),t);return r}},{key:"createRandomMarkers",value:function(){var e=arguments.length<=0||void 0===arguments[0]?5:arguments[0],t=arguments.length<=1||void 0===arguments[1]?this.map:arguments[1],r=.17,s=.03,o=new google.maps.LatLng(51.500524,-.1769147),i=[];t===this.map&&(this.clearAllMarkers(this.markers),this.markers=i);for(var a=1;e>a;a++){var n=new google.maps.LatLng(o.lat()-s/2+s*Math.random(),o.lng()-r/2+r*Math.random()),l=new google.maps.Marker({position:n,map:t});i.push(l)}return this.createCluster(i,t),this.centerOnMarkers(i,t),i}},{key:"createMarkersFromCoordinates",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?this.map:arguments[1],r=[];t===this.map&&(this.clearAllMarkers(this.markers),this.markers=r);var s=!0,o=!1,i=void 0;try{for(var a,n=e[Symbol.iterator]();!(s=(a=n.next()).done);s=!0){var l=a.value,u=new google.maps.LatLng(l.latitude,l.longitude),h=new google.maps.Marker({position:u,map:t});r.push(h)}}catch(p){o=!0,i=p}finally{try{!s&&n["return"]&&n["return"]()}finally{if(o)throw i}}return this.centerOnMarkers(r,t),r}},{key:"centerOnMarkers",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.markers:arguments[0],t=arguments.length<=1||void 0===arguments[1]?this.map:arguments[1],r=new google.maps.LatLngBounds,s=!0,o=!1,i=void 0;try{for(var a,n=e[Symbol.iterator]();!(s=(a=n.next()).done);s=!0){var l=a.value;r.extend(l.getPosition())}}catch(u){o=!0,i=u}finally{try{!s&&n["return"]&&n["return"]()}finally{if(o)throw i}}t.fitBounds(r)}},{key:"createCluster",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.markers:arguments[0],t=arguments.length<=1||void 0===arguments[1]?this.map:arguments[1],r={styles:[{textColor:"white",url:"img/marker.svg",height:52,width:31}],minimumClusterSize:1},s=new MarkerClusterer(t,e,r);return s}},{key:"clearAllMarkers",value:function(){for(var e=arguments.length<=0||void 0===arguments[0]?this.markers:arguments[0];e.length;)e.pop().setMap(null);return e}},{key:"triggerResize",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.map:arguments[0];google.maps.event.trigger(e,"resize"),e.setZoom(16)}}]),e}(),PLACEHOLDER_VALUE="",HIDDEN_CLASS="hidden",SearchController=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];babelHelpers.classCallCheck(this,e);var r=t.searchBarSelector,s=t.searchFieldsSelector,o=t.targetsContainerSelector,i=t.infoElSelector,a=t.filtersAppliedcallback,n=document.querySelector(r);assert(n&&n.nodeName,"No search bar found using selectos '"+r+"'"),this.searchBarEl=n;var l=Array.from(n.querySelectorAll(s));assert(l&&l.length,"No search fields found with selector '"+s+"'"),this.filters=l.reverse();var u=document.querySelector(o);assert(u&&u.nodeName,"No valid search container found using selector "+o+"."),this.targetsContainer=u;var h=document.querySelector(i);assert(h&&h.nodeName,"No valid info element found using selector "+i+"."),this.infoEl=h,"function"==typeof a?this.filtersAppliedcallback=a:this.filtersAppliedcallback=function(){return null},handleUI(l),this._initFilterElements(l)}return babelHelpers.createClass(e,[{key:"_initFilterElements",value:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?this.filters:arguments[0],r=!0,s=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var n=i.value,l="SELECT"===n.nodeName?"change":"keyup";n.addEventListener(l,function(){e.applyFilters()})}}catch(u){s=!0,o=u}finally{try{!r&&a["return"]&&a["return"]()}finally{if(s)throw o}}}},{key:"applyFilters",value:function(){var e=arguments.length<=0||void 0===arguments[0]?this.filters:arguments[0],t=arguments.length<=1||void 0===arguments[1]?this.targetsContainer:arguments[1],r=arguments.length<=2||void 0===arguments[2]?this.infoEl:arguments[2];assert(e,"No filters provided."),assert(t,"No filter targets container provided"),assert(r,"No info element provided");var s=Array.from(t.children);0===s.length&&console.warn("No target elements being filtered.");var o=[],i=[],a=!0,n=!1,l=void 0;try{for(var u,h=s[Symbol.iterator]();!(a=(u=h.next()).done);a=!0){var p=u.value,c=targetMatchesFilters(p,e),d=c?o:i;d.push(p)}}catch(f){n=!0,l=f}finally{try{!a&&h["return"]&&h["return"]()}finally{if(n)throw l}}return 0===o.length?(r.classList.remove(HIDDEN_CLASS),r.innerText="No properties were found using these filters",o=s,i=[]):r.classList.add(HIDDEN_CLASS),o.forEach(function(e){show(e,!0)}),i.forEach(function(e){show(e,!1)}),this.filtersAppliedcallback(o,i),o}},{key:"fillFilter",value:function(e,t){var r=arguments.length<=2||void 0===arguments[2]?this.filters:arguments[2],s=void 0;s="number"==typeof e?r[e]:e,assert(s&&s.nodeName,"Invalid 'filterReference' provided: "+s),assert("string"==typeof t,"Invalid 'value' value: "+t);var o="INPUT"===s.nodeName&&s.getAttribute("type")&&("search"===s.getAttribute("type").toLowerCase()||"text"===s.getAttribute("type").toLowerCase());if(o)s.value=t;else if("SELECT"===s.nodeName){var i=Array.from(s.querySelectorAll("option")),a=i.map(function(e){return e.selected?PLACEHOLDER_VALUE:e.getAttribute("value")||e.innerHTML}),n=a.findIndex(function(e){return searchMatch(t,e)});n>-1?s.selectedIndex=n:console.warn("No option available for value '"+t+"'")}}},{key:"getFilterByCriterion",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?this.filters:arguments[1],r=!0,s=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var n=i.value,l=getFilterCriteria(n);if(l.indexOf(e)>-1)return n}}catch(u){s=!0,o=u}finally{try{!r&&a["return"]&&a["return"]()}finally{if(s)throw o}}return null}}]),e}(),SEARCH_BAR_SELECTOR=".search-bar",MAP_TARGET_SELECTOR=".js-property-map",TILES_LIST_CONTAINER_SELECTOR=".js-property-list",SEARCH_INPUT_SELECTOR=".js-search-input",SEARCH_INFO_SELECTOR=".js-search-info";initPage();
//# sourceMappingURL=data:application/json;base64,
