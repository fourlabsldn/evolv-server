{"version":3,"names":[],"mappings":"","sources":["sales.js"],"sourcesContent":["/* globals assert, MakeArg*/\n\nimport MapController from './_sales/MapController.js';\nimport SearchController from './_sales/SearchController.js';\n\n// Global values\nconst SEARCH_BAR_SELECTOR = '.search-bar';\nconst MAP_TARGET_SELECTOR = '.js-property-map';\nconst TILES_LIST_CONTAINER_SELECTOR = '.js-property-list';\nconst SEARCH_INPUT_SELECTOR = '.js-search-input';\nconst SEARCH_INFO_SELECTOR = '.js-search-info';\n\nfunction loadProperties() {\n  'use strict';\n\n  return fetch('/js/database.json')\n    .then((jsonText) => jsonText.json())\n    .then((database) => {\n      assert(Array.isArray(database.properties),\n        'Invalid database file loaded. No properties array found.');\n      return database;\n    });\n}\n\n/**\n * Creates an HTML element for a property's Object.\n * (Real estate property, not a Javascript construct)\n * @function createTileElement\n * @param  {objects} prop Object with the property's details\n * @return {HTMLElement}      The property element ready to go to the DOM.\n */\nfunction createTileElement(prop) {\n  prop.address = prop.address || {};\n  const propHtml = `<div class=\"prop-tile\">\n      <div class=\"prop-tile-crop\">\n        <a href=\"/property.html?id=${prop.id}\">\n          <img src=\"${prop.images[0]}\"\n          alt=\"${prop.address.houseNumber} ${prop.address.street}\" />\n        </a>\n      </div>\n      <div class=\"prop-tile-description\">\n        <h2 class=\"prop-tile-title-and-address\">\n          <a href=\"/property.html\">\n            <span class=\"prop-tile-street-name\">\n              ${prop.address.street}\n            </span>\n            <span class=\"prop-tile-postcode\">\n              ${prop.address.city} ${prop.address.postcode}\n            </span>\n          </a>\n        </h2>\n\n        <p class=\"prop-tile-buy-info\">\n          <span class=\"prop-tile-price\">${prop.price}</span>\n          <span class=\"prop-tile-ownership\">${prop.ownership}</span>\n        </p>\n      </div>\n    </div>`;\n\n  const div = document.createElement('div');\n  div.innerHTML = propHtml;\n\n  const propElement = div.children[0];\n\n  // Add data- info\n  propElement.dataset.price = prop.price;\n  propElement.dataset.postcode = prop.address.postcode;\n  propElement.dataset.street = prop.address.street;\n  propElement.dataset.bedrooms = prop.bedrooms;\n  propElement.dataset.details = prop['details-list'].join(' ');\n  propElement.dataset.ownership = prop.ownership;\n  propElement.dataset.fullAddress = prop.location;\n  propElement.dataset.sellRent = prop.sellRent;\n  propElement.dataset.latitude = prop.address.latitude;\n  propElement.dataset.longitude = prop.address.longitude;\n\n  return propElement;\n}\n\n/**\n * Display properties on the map\n * @function showOnMap\n * @param  {Array} coordinates Each item in the 'coordinate' array\n *                 must have a 'latitude' and a 'longitude' property\n * @param  {Object} mapController\n * @return {void}\n */\nfunction showOnMap(coordinates, mapController) {\n  mapController.createMarkersFromCoordinates(coordinates);\n  mapController.createCluster();\n}\n\n\nfunction createTiles(properties, targetSelector) {\n  'use strict';\n\n  const propListContainer = document.querySelector(targetSelector);\n  assert(propListContainer, 'No property list container element found in the DOM.');\n\n  // Add properties nicely formatted to the DOM.\n  for (const prop of properties) {\n    const propEl = createTileElement(prop);\n    propListContainer.appendChild(propEl);\n  }\n}\n\nfunction fillSearchFromQueryParameters(searchController) {\n  const Arg = MakeArg(); // eslint-disable-line new-cap\n  const getParameters = Arg.all();\n  const getParametersKeys = Object.keys(getParameters);\n\n  for (const par of getParametersKeys) {\n    const filter = searchController.getFilterByCriterion(par);\n    if (filter) {\n      let value = getParameters[par];\n      value = (typeof value === 'string') ? value : value.toString();\n      searchController.fillFilter(filter, value);\n    }\n  }\n\n\n  // Now we apply the filter.\n  searchController.applyFilters();\n}\n\nfunction initPage() {\n  // Start control of search bar\n  const searchControllerConfig = {\n    searchBarSelector: SEARCH_BAR_SELECTOR,\n    searchFieldsSelector: SEARCH_INPUT_SELECTOR,\n    targetsContainerSelector: TILES_LIST_CONTAINER_SELECTOR,\n    infoElSelector: SEARCH_INFO_SELECTOR,\n    // filter applied callback\n    filtersAppliedcallback: (matches) => {\n      const coordinates = [];\n      for (const tile of matches) {\n        coordinates.push({\n          latitude: tile.dataset.latitude,\n          longitude: tile.dataset.longitude,\n        });\n      }\n\n      showOnMap(coordinates, mapController);\n    },\n  };\n\n  const searchController = new SearchController(searchControllerConfig);\n\n  // Create map and instantiate a controller\n  const mapController = new MapController(MAP_TARGET_SELECTOR);\n\n  // Get stuff from the server\n  loadProperties()\n    .then((database) => {\n      const properties = database.properties;\n      // Display server data in appropriate places\n      createTiles(properties, TILES_LIST_CONTAINER_SELECTOR);\n\n      // Now we fill the search from what is in the URL and perform a search.\n      fillSearchFromQueryParameters(searchController, mapController);\n    })\n    .catch((err) => {\n      throw new Error(err);\n    });\n}\n\ninitPage();\n"],"file":"sales.js","sourceRoot":"/source/"}